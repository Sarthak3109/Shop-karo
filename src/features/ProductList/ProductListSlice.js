import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';
import { fetchProducts,fetchProductsBySearchParam,fetchBrands, fetchCategories, fetchProductsById } from './ProductListAPI';

const initialState = {
  products: [],
  status: 'idle',
  totalItems : 0,
  brands : [],
  categories : [],
  currentProduct : null
};


export const fetchAllProductsAsync = createAsyncThunk(
  'ProductList/fetchProducts',
  async () => {
    const response = await fetchProducts();

    return response.data;
  }
);
export const fetchAllBrandsAsync = createAsyncThunk(
  'ProductList/fetchBrands',
  async () => {
    const response = await fetchBrands();

    return response.data;
  }
);

export const fetchAllCategoriesAsync = createAsyncThunk(
  'ProductList/fetchCategories',
  async () => {
    const response = await fetchCategories();
    return response.data;
  }
);


export const fetchProductsBySearchValueAsync = createAsyncThunk(
  'ProductList/fetchProductsBySearchParam',
  async ({filter, sort,Page}) => {
    const response = await fetchProductsBySearchParam(filter,sort,Page);
    return response.data;
  }
);
export const fetchProductsByIdAsync = createAsyncThunk(
  'ProductList/fetchProductsById',
  async ({id}) => {
    const response = await fetchProductsById(id);
    return response.data;
  }
);





export const productSlice = createSlice({
  name: 'product',
  initialState,

  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.data

        
      })
      .addCase(fetchAllBrandsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllBrandsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.brands = action.payload.data
      })
      .addCase(fetchAllCategoriesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllCategoriesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.categories = action.payload.data
        
      })
      .addCase(fetchProductsBySearchValueAsync.pending, (state) => {
        state.status = 'loading';
      
        
      })
      .addCase(fetchProductsBySearchValueAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.products
        state.totalItems = action.payload.totalItems
      })
      .addCase(fetchProductsByIdAsync.pending, (state) => {
        state.status = 'loading';
      
        
      })
      .addCase(fetchProductsByIdAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.currentProduct = action.payload.data[0]
        
      })
  },
});

export const { increment,incrementByAmount } = productSlice.actions;

export const selectAllProducts = (state) => state.product.products;
export const stateofProducts = (state)=>state.product.status
export const totalNumberOfItems = (state)=>state.product.totalItems
export const selectAllBrands = (state) => state.product.brands;
export const selectAllCategories = (state) => state.product.categories;
export const selectCurrentProduct = (state)=> state.product.currentProduct;
export default productSlice.reducer;