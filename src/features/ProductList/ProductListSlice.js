import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts,fetchProductsBySearchParam,fetchProductsBySortParam } from './ProductListAPI';

const initialState = {
  products: [],
  status: 'idle',
};


export const fetchAllProductsAsync = createAsyncThunk(
  'ProductList/fetchProducts',
  async () => {
    const response = await fetchProducts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchProductsBySearchValueAsync = createAsyncThunk(
  'ProductList/fetchProductsBySearchParam',
  async (filter) => {
    const response = await fetchProductsBySearchParam(filter);
    return response.data;
  }
);

export const fetchProductsBySortParamAsync = createAsyncThunk(
  'ProductList/fetchProductsBySortParam',
  async (filter) => {
    const response = await fetchProductsBySortParam(filter);
    return response.data;
  }
);





export const productSlice = createSlice({
  name: 'product',
  initialState,

  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.data
        
      })
      .addCase(fetchProductsBySearchValueAsync.pending, (state) => {
        state.status = 'loading';
      
        
      })
      .addCase(fetchProductsBySearchValueAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.data
        
      })
      .addCase(fetchProductsBySortParamAsync.pending, (state) => {
        state.status = 'loading';
      
        
      })
      .addCase(fetchProductsBySortParamAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.data
        
      })
  },
});

export const { increment,incrementByAmount } = productSlice.actions;

export const selectAllProducts = (state) => state.product.products;
export const stateofProducts = (state)=>state.product.status


export default productSlice.reducer;
